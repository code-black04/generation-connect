events {}
error_log /var/log/nginx/error.log debug;

http {
    client_max_body_size 50M;
    upstream app {
        ip_hash;
        server app:3000;
    }

    upstream api {
        ip_hash;
        server api:8080;
    }

    server {
    listen 80;
    server_name localhost;

    return 301 https://localhost;
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/ssl/certs/selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/selfsigned.key;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        location ^~ /generation-connect-api/auth/ {
                    add_header 'Access-Control-Allow-Origin' '*'; 
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                    add_header 'Access-Control-Allow-Credentials' 'true';

                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' '*';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                        add_header 'Access-Control-Max-Age' 3600;
                        return 204;
                    }

                    proxy_pass http://api;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location ^~ /generation-connect-app/auth/ {
                    add_header 'Access-Control-Allow-Origin' '*'; 
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                    add_header 'Access-Control-Allow-Credentials' 'true'; 

                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' '*';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                        add_header 'Access-Control-Max-Age' 3600;
                        return 204;
                    }

                    # JWT Authentication and Role Validation (cookie-based)
                    access_by_lua_block {
                        ngx.log(ngx.INFO,"generation-connect-app................");
                        local jwt = require "resty.jwt"
                        local cjson = require "cjson"

                        -- Get the JWT from the cookies
                        local cookie = ngx.var.http_cookie
                        local token = nil

                        if cookie then
                            local jwt_cookie = cookie:match("accessToken=([^;]+)")
                            if jwt_cookie then
                                token = jwt_cookie
                            end
                        end
                        ngx.log(ngx.INFO, token)

                        if token then
                            local jwt_obj = jwt:verify("lua-resty-jwt", token)
                            if jwt_obj then
                                local roles = jwt_obj.payload.roles
                                local is_admin = false
                                local is_user = false

                                for _, role in ipairs(roles) do
                                    if role == "ROLE_ADMIN" then
                                        is_admin = true
                                    elseif role == "ROLE_USER" then
                                        is_user = true
                                    end
                                end
                                ngx.log(ngx.INFO, "is_admin:", is_admin)
                                ngx.log(ngx.INFO, "is_user: ", is_user)
                                if is_admin then
                                    ngx.log(ngx.INFO,"generation-connect-app admin..")
                                    ngx.redirect("/generation-connect-app/admin/dashboard")
                                elseif is_user then
                                    ngx.log(ngx.INFO,"generation-connect-app user..")
                                    ngx.redirect("/generation-connect-app/user/dashboard")
                                end
                            end
                        end
                    }
                    proxy_pass http://app;

                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Route for /generation-connect-app
        location ^~ /generation-connect-app {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                add_header 'Access-Control-Max-Age' 3600;
                return 204;
            }

            # JWT Authentication and Role Validation (cookie-based)
            access_by_lua_block {
                ngx.log(ngx.INFO,"generation-connect-app................");

                -- Allow invite link without authentication
                if ngx.var.request_uri:match("^/generation%-connect%-app/invite/accept") then
                    ngx.log(ngx.INFO, "Skipping auth for invite/accept page");
                    return
                end

                local jwt = require "resty.jwt"
                local cjson = require "cjson"

                local cookie = ngx.var.http_cookie
                local token = nil

                if cookie then
                    local jwt_cookie = cookie:match("accessToken=([^;]+)")
                    if jwt_cookie then
                        token = jwt_cookie
                    end
                end
                ngx.log(ngx.INFO,token)

                if not token then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.log(ngx.INFO,"token generation-connect-appAccess Denied: User does not have valid role (ROLE_ADMIN or ROLE_USER)")
                    ngx.redirect("/")
                    return
                end

                local jwt_obj = jwt:verify("lua-resty-jwt", token)
                if not jwt_obj then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.log(ngx.INFO,"jwt_obj generation-connect-app Access Denied: User does not have valid role (ROLE_ADMIN or ROLE_USER)")
                    ngx.redirect("/")
                    return
                end

                local roles = jwt_obj.payload.roles
                local is_admin = false
                local is_user = false

                for _, role in ipairs(roles) do
                    if role == "ROLE_ADMIN" then
                        is_admin = true
                    elseif role == "ROLE_USER" then
                        is_user = true
                    end
                end

                if not is_admin and not is_user then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.log(ngx.INFO,"HTTP_FORBIDDEN generation-connect-app Access Denied: User does not have valid role (ROLE_ADMIN or ROLE_USER)")
                    ngx.redirect("/")  -- Redirect to login page
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end

            }

            proxy_pass http://app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }


        # Route for /generation-connect-api
        location ^~ /generation-connect-api {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                add_header 'Access-Control-Max-Age' 3600;
                return 204;
            }

            access_by_lua_block {
                ngx.log(ngx.INFO,"generation-connect-api................");
                local uri = ngx.var.request_uri
                    if uri:match("^/generation%-connect%-api/family%-tree/manage%-users/accept") then
                        ngx.log(ngx.INFO, "Skipping JWT check for /check-invite")
                        return
                    end

                local jwt = require "resty.jwt"
                local cjson = require "cjson"

                -- Get the JWT from the cookies
                local cookie = ngx.var.http_cookie
                local token = nil

                if cookie then
                    local jwt_cookie = cookie:match("accessToken=([^;]+)")
                    if jwt_cookie then
                        token = jwt_cookie
                    end
                end

                if token then
                    local jwt_obj = jwt:verify("lua-resty-jwt", token)
                    if jwt_obj then
                        local roles = jwt_obj.payload.roles
                        local is_admin = false
                        local is_user = false

                        for _, role in ipairs(roles) do
                            if role == "ROLE_ADMIN" then
                                is_admin = true
                            elseif role == "ROLE_USER" then
                                is_user = true
                            end
                        end
                    end
                end
            }
            proxy_pass http://api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location ^~ /swagger-ui {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                    add_header 'Access-Control-Allow-Credentials' 'true';

                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' '*';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                        add_header 'Access-Control-Max-Age' 3600;
                        return 204;
                    }
                    proxy_pass http://api;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location ^~ / {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                    add_header 'Access-Control-Allow-Credentials' 'true';

                    if ($request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' '*';
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
                        add_header 'Access-Control-Max-Age' 3600;
                        return 204;
                    }
                    proxy_pass http://app;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
